function clamp(val, min, max)
{
  if (val > max)
  {
    return max;
  }
  else if (val < min)
  {
    return min;
  }
  else
  {
    return val;
  }
}
function rotate(vector, eulerlist)
{
  var tempverts = vector;
  var tempverts2 = [];
  for (var f = 0; f < 3; f++)
    {
      var deg = eulerlist[f];
      
      for (var j = 0; j < 3; j++)
      {
        var finalval = 0;
        for (var l = 0; l < 3; l++)
        {
          var val = matrices[f][j*3+l];
          
          if (Math.abs(val) == 2)
          {
            finalval += tempverts[l]*(Math.sin(deg)*(val/2));
          }
          else if (Math.abs(val) == 3)
          {
            finalval += tempverts[l]*(Math.cos(deg)*(val/3));
          }
          else
          {
            finalval += tempverts[l]*val;
          }
        }
        tempverts2[j] = finalval;
      }
      tempverts[0] = tempverts2[0];
      tempverts[1] = tempverts2[1];
      tempverts[2] = tempverts2[2];
      
      
      
    }
    return tempverts;
}
function dot(vector1, vector2) {
  var result = 0;
  for (var i = 0; i < vector1.length; i++) {
    result += vector1[i] * vector2[i];
  }
  return result;
}
function normalize(vector)
{
  var total = Math.abs(vector[0])+Math.abs(vector[1])+Math.abs(vector[2]);
  var fac = 1/total;
  return [vector[0]*fac,vector[1]*fac,vector[2]*fac];
  
}
var verts = [
    -0.5,
    -0.5,
    -0.5,
  
    0.5,
    -0.5,
    -0.5,
  
    0.5,
    -0.5,
    0.5,
  
     -0.5,
    -0.5,
    0.5,
  
    -0.5,
    0.5,
    -0.5,
  
    0.5,
    0.5,
    -0.5,
  
    0.5,
    0.5,
    0.5,
  
    -0.5,
    0.5,
    0.5,
  
];
var edges = [
   0,1,
   1,2,
   2,3,
   3,0,
   0,4,
   4,5,
   5,6,
   6,7,
   7,4,
   7,3,
   1,5,
   2,6,
   6,2
];
var normals = [
   [
     [-1,0,0],
     [0,-1,0],
     [0,0,-1],
    ],
   [
     [1,0,0],
     [0,-1,0],
     [0,0,-1],
   ],
   [
     [1,0,0],
     [0,-1,0],
     [0,0,1],
   ],
   [
     [-1,0,0],
     [0,-1,0],
     [0,0,1],
   ],
   [
     [-1,0,0],
     [0,1,0],
     [0,0,-1],
   ],
   [
     [1,0,0],
     [0,1,0],
     [0,0,-1],
   ],
   [
     [1,0,0],
     [0,1,0],
     [0,0,1],
   ],
   [
     [-1,0,0],
     [0,1,0],
     [0,0,1],
   ],
];
var rotMatrixX = [
  1,0,0,
  0,3,-2,
  0,2,3
];
var rotMatrixY = [
  3,0,2,
  0,1,0,
  -2,0,3
];
var rotMatrixZ = [
  3,-2,0,
  2,3,0,
  0,0,1
];
var matrices = [
  rotMatrixY,
  rotMatrixX,
  rotMatrixZ
];
var screenSpc = [];
createCanvas("screen", 320, 320);
var clipPlane = 0.1;
var FOV = 0.1;
var camPos = [0,-1];
var euler = [0,0,0];
var x=0;
var y=0;
var z=0;
var i = 0;


//DEBUG: simply shows normals

/*for (i;i<normals.length;i++)
  {
    for (var j=0;j<normals[i].length;j++)
    {
      
      
      for (d;d<3;d++)
      {
        console.log(verts[i*3+d] + normals[i][j][d]);
        verts[verts.length]=verts[i*3+d] + normals[i][j][d]/4;
        
      }
      edges[edges.length] = i;
      edges[edges.length] = (verts.length)/3-1;
      d = 0;
    }
  }
i = 0;*/


function gc(){
  x = 0;
  y = 0;
  z = 0;
  
  screenSpc = [];
  var verts2 = [];
  var verts3 = [];
  var camForward = rotate([0,0,1],[-euler[0],euler[1],euler[2]]);
  camForward = [-camForward[0],-camForward[1],-camForward[2]];
  console.clear();
//transform verts, linearly and angularly around cam transform
  for (var i = 0; i < verts.length/3; i++)
  {
    
    var cullPass = false;
    
    var ray = [verts[i*3]-camPos[0],verts[i*3+1],verts[i*3+2]-camPos[1]];
    ray = normalize(ray);
    ray = [-ray[0],-ray[1],-ray[2]];
    for (var d = 0;d<normals[i].length;d++)
    {
      
      console.log(dot(normals[i][d],ray));
      if(dot(normals[i][d],ray) >0)
      {
        cullPass = true;
        break;
      }
    }
    console.log(ray);
    if(cullPass == true)
    {
    d=0;
    for (d; d < 3; d++)
    {
        verts2[d] = verts[i*3 + d];
        verts3[d] = verts[i*3 + d];
    }
    d = 0 ;
    
    
    //x = (x * Math.cos(deg))+(z*Math.sin(deg));
    //z = (-x * Math.sin(deg))+(z*Math.cos(deg));
    verts3[0] += -camPos[0]; //* Math.cos(deg)+camPos[1]*Math.sin(deg); 
    
    verts3[2] += -camPos[1]; //* Math.cos(deg)+-camPos[0]*Math.sin(deg);
    verts2 = rotate(verts3, euler); 
    
    //console.log(verts2);
    
    FOV =  0.1 -(getProperty("fovSlider","value")-100)/100;
    x = verts2[0];
    y = verts2[1];
    z = verts2[2];
    
    //convert to screen space
    if (z <=clipPlane)
    {
      screenSpc[i*2] = null;
      screenSpc[i*2+1] = null;
    }
    else
    {
      var clipPos = (clipPlane/z);
      x = x*clipPos;
      y = y*clipPos;
      var xfac = 0.5 + (x/FOV)/2;
      var yfac = 0.5 + (y/FOV)/2;
      screenSpc[i*2] = 320*xfac;
      screenSpc[i*2+1] = 320*yfac;
    }
    }
    //statement for if it is culled
    else
    {
      screenSpc[i*2] = null;
      screenSpc[i*2+1] = null;
    }
  }
  i = 0;
  
  
}
function render()
{
  clearCanvas();
  rect(0, 0, 320, 320);
  i = 0;
  for (i; i < screenSpc.length; i++)
  {
    
    
    var x1 = screenSpc[edges[i*2]*2];
    var y1 = screenSpc[edges[i*2]*2+1];
    var x2 = screenSpc[edges[i*2+1]*2];
    var y2 = screenSpc[edges[i*2+1]*2+1];
    if (x1!=null && y1!=null&&x2!=null&&y2!=null)
    {
      //console.log("rendered");
      //circle(x1, y1, 10);
      line(x1,y1,x2,y2);
    }
    
  }
  
}
var forward=0;
var right=0;
var yspd = 0;
var xspd = 0;
var walkspeed = 0.1;
timedLoop(100, function() {
  
    gc();
    render();
    camPos[0] += right*Math.cos(-euler[0])+forward*Math.sin(-euler[0]);
    camPos[1] += forward*Math.cos(-euler[0])-right*Math.sin(-euler[0]);
    euler[0]+=yspd;
    euler[1]+=xspd;
});

onEvent("screen1", "keyup",function(event){
  switch(event.key)
  {
    case "w":
      forward-=walkspeed;
      break;
    case "s":
      forward+=walkspeed;
      break;
    case "a":
      right+=walkspeed;
      break;
    case "d":
      right-=walkspeed;
      break;
  }
  forward = clamp(forward,-walkspeed,walkspeed);
  right = clamp(right,-walkspeed,walkspeed);
  switch(event.key)
  {
    case "j":
      yspd-=0.1;
      break;
    case "l":
      yspd+=0.1;
      break;
    case "k":
      xspd-=0.1;
      break;
    case "i":
      xspd+=0.1;
  }
  yspd = clamp(yspd,-0.1,0.1);
  xspd = clamp(xspd,-0.1,0.1);
});
onEvent("screen1", "keydown",function(event){
  switch(event.key)
  {
    case "w":
      forward+=walkspeed;
      break;
    case "s":
      forward-=walkspeed;
      break;
    case "a":
      right-=walkspeed;
      break;
    case "d":
      right+=walkspeed;
  }
  forward = clamp(forward,-walkspeed,walkspeed);
  right = clamp(right,-walkspeed,walkspeed);
  switch(event.key)
  {
    case "j":
      yspd+=0.1;
      break;
    case "l":
      yspd-=0.1;
      break;
    case "k":
      xspd+=0.1;
      break;
    case "i":
      xspd-=0.1;
  }
  yspd = clamp(yspd,-0.1,0.1);
  xspd = clamp(xspd,-0.1,0.1);
});

